

##############
29th Apr. 2023
##############

		Git Remote Repositories :::

			git branching techniques 
			rebase, squash
			branching strategies
			Stash ==> 

		
	Branching Strategies :::

		Feature based 



		master branch 
			Dev_branch : 
			 	feature1 ==> Scripts... created some changes in the repo.... created a index.jsp file --- adding the incremental changes to staging.
				feature2 

		Stash ::: ==> Used to safely move the UnCommited changes from staging area to Temp. Area. (or) Temp. Branch.


			Stash current work:
					$ git stash

					Saving stashes with a message: 
					$ git stash save "<Stashing Message>"

					Check the stored stashes: 
					$ git stash list

					Re-apply the changes that you just stashed 
					$ git stash apply 

					Track the stashes and their changes: 
					$ git stash show stash@{0}

					Re-apply the previous commits: 
					$ git stash pop

					Delete a most recent stash from the queue: 
					$ git stash drop

					Delete all the available stashes at once: 
					$ git stash clear

					Stash work on a separate branch: 
					$ git stash branch <branch name>

	.gitignore!!!
	
	GIT Remote Repository :::

		github :
			create a remote repo
			create files,
			create branches, pull request, merge
			how to access it in local repo.
		git clone,pull,fetch,push,remote 
		github access token 
 
	.gitignore 
		
	java_web_appln.project -- craeted in  Dev Machine.
	
	Java_web_appln.project 3-tier appln. dbase.     >>>> 	push t changes into remote repo.
		src 
		  sample.java
		  index.jsp 
		test
		pom.xml
		properties
		config
		secrets
		db1_credential
		target
		  *.war

	git init 
	.gitignore file
		secrets
		db1_credential
	








	how to access it in local repo.???????
		git clone,pull,fetch,push,remote 
		github access token


	Remote Repo.?

	Developers' Workload ???
		New Project 
			git init  == > push 			
	
			git clone  ==> push
		Change Request / Enhancements 
		Bug fix...
	
		git clone https://github.com/SA-11Mar-2023-DevOps/testremoterepo1.git
	

git clone
push
remote 

	fetch --> check for the incremental changes
	pull  --> git fetch & merge	



Summary :::
	git workflow
	git branching strategies
	Misc. GIT Command
	Merge,rebase,squash,stash
	Remote Repo.

Next Module ::::		

	Jenkins.

	Maven Projects?
		web appln.
		spring boot 
		java web appln.
		


##############
30th Apr. 2023
##############

	git, maven, junit,testNG, Selenium, ansible, docker, kubernetes, prometheus, grafana....

	Build Orchestration Tool ::
	Jenkins 
		Is a Master Slave Architecture. 
	Azure Pipeline
	AWS Code pipeline
	gitlab-ci

	Plugins. 

	DevOps Engg. What is ur role in Jenkins ???
	
	Jenkins ::
		
	Developers Perspective :::
		Jenkins --

	DevOps Perspective
	
		Jenkins Administration ::

			Installation of Jenkins 
			Config Jenkins Master & Slave 
			Install and Manage Plugins, Tool
			Create and Manege Users, Credentials
			Manage the remote servers 
			Creating CI/CD Pipeline/Jobs/Project
			Backup & recovery 



	Installation of Jenkins ::

		Launch  VM - Ubuntu 
			Install Jenkins 
			VM - Slave1
			VM - Test_Server



		Jenkins Projects :::


			Free-Style projects
				
			Pipeline Projects


		Variables :::
			Environment Variables
			User - Defined Variables	


	Jenkins Pipeline :::
		Scripted Pipeline 				 	--> node
		Declarative Pipeline -- will start with the keyword 	--> pipeline


	Pipeline ??? 

	- defines the CI/CD workflow.

	Java Maven Web Application :::


	Source Code >>

		Eclipse based IDEs - coding

		Commit the code to remote git repo.

	Pipeline ::
		Composed of many stages :
		Stage1 
			SCM Checkout
		Stage2
			Code Build
		Stage3 
			Artifact Creation
		Stage4
			Deploy to QA_Server
		Stage5
			Automated Testing
		Stage6 
			Deploy to higher envi.

	How to write a pipeline script ???


Summary:

	Install Jenkins
	Manage Plugins
	Locate Jenkins Installation path and explore the components
	How to create users
	How to create Free-style Project
	How to create a very simple pipeline project.


Next:
	Nodes
	Remote Server Handling
	email...		




##############
6th May. 2023
##############


	
Next:
	Nodes
	Remote Server Handling
	email...


		Jenkins Nodes :: Slave Machines


		Jenkins Master --> Acts as server - used to create the jobs and schedule the jobs to Nodes.
			Microservice based architecure!!!

		Jenkins Slave ==> Build Server.
			Install the build tools (maven,jdk,git)

		Jenkins_Master	
			Jenkins Slave ==> Build Server. - Java Aplication (maven,jdk,git)
			SSH Connection --
			Create user
				Create SSH to this user 


		Jenkins Master - Slave Configuration :::
			


pipeline {
    agent { label 'sa-javaslave' }

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "slave_maven"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Checkout Src from github repo'
		git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Build') {
            steps {
                echo 'Perform Maven Build'
                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }
        stage('Deploy to QA Server') {
            steps {
		script {
		sshPublisher(publishers: [sshPublisherDesc(configName: 'QA_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
		}
            }
	}
    }
}
	

	Jenkins Master --> To create a pipeline job
		Slave1 --> Perform the Build

	Development Workflow :::

	Developer use Eclipse to create the source code 	

		junit tomcat - unit test.

		create artifacts

	Testing team --> QA,UAT

	From Eclipse Code -- Pushed to github --> Jenkins pipeline --> build_server(slave) -> Promote to QA

		Auto-trigger .

	Commit source code in repo.(github)	
	Checkout the code from github 
	and perform build			
			
	non-prod					prod
	dev
	build_envi
	test(qa,uat,...)


	Test_Server ===> test the web application ==> jdk, tomcat
		VM,  jdk, tomcat, 


	Jenkins_Master 
		Slave1 jdk, maven 
	TomcatServer -- jdk, tomcat, 


	Add user in tomcat server
		.ssh key -- 

	publish over ssh plugins



	Deployment ::::

		Copy the artifacts from source machine to target machine 


	source : slave						Target : Tomcat server

		target/mvn-helloworld.war				/opt/tomcat/webapps/mvn-helloworld.war


			
##############
7th May. 2023
##############
		
	Automate the build and deployment using Build Triggers!

	Master = Scheduling the pipeline jobs.

	Use case 1 :::
		
	Dev,build,test ---> 
	cleanup,add more volume, 


		Build Periodic 
		 cleanup_vol jobs on daily basis.

		Envi. --> Non-Prod 			PROD 
			Dev,Build,QA,UAT

		Jenkins_Job -- Start / Stop the Servers
			Jenkins_Start_job ==> 9AM
			Jenkins_Stop_job  ==> 10PM


	Install git in master :::
			
		git poll scm

			Test cycle ==> 

			once in 4 hrs test cycle can run.
			8 - 12 


		dev_team -- commit the changes to src repo. --> QA

		github webhooks

			--> for every commit in the src code repo. build will gets triggered using github webhook.

		goto the repo. level settings :::
			add web hook
			github payload url :: http://13.235.2.213:8080/github-webhook/

	

		Java Code Coverage Tool  -- JaCoCo Tool / Plugin









pipeline {
    agent { label 'sa-javaslave' }

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "slave_maven"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Checkout Src from github repo'
		git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Maven Build') {
            steps {
                echo 'Perform Maven Build'
                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }
        stage('Deploy to QA Server') {
            steps {
		script {
		sshPublisher(publishers: [sshPublisherDesc(configName: 'QA_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
		}
        }
	}
    }
}




source code repo. Template ::::

Create Remote repo. 

	Jenkinsfile
	Dockerfile
	deploymentobj.yaml
	service.yaml


Email Notifications :::::


Email Notification Plugins :::

SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465

Login to Gmail :::

Click Account Settings

select Security 

MFA --> mobile#
App Password = 16
What ? window
Which Appln - email



GIT Merge conflicts :::

tried to update the same file from diff branch 


master 
	file1.txt rec1,2,3,4 ==> rec1,234,2342,2342(featurel)	merged
		git merge feature2
			     ==> rec1,asdf,aasdf,asdfs(feature2) ==> merging
	
	Merge Conflict occurs. file1.txt

	- Identify the file that is causing merge conflict.
	- Review the changes done in that file.
	- >>>>>HEAD
	  feature1
	  >>>>> feature2
	- update the file with the actual content. rec1,234,2342,2342
	- git add and git commit	
			status will be clean


	
feature1
	file1.txt rec1,2,3,4 ==> rec1,234,2342,2342
feature2
	file1.txt rec1,2,3,4 ==> rec1,asdf,aasdf,asdfs



Eclipse ::::

Use ::::

	Maven Web Appln.
	- Using Eclipse, Create Maven Web Appln. project
	- Push the project to github repo.
	
	- Use Eclipse, import the Maven Web Appln. project from github
	- Make the necessary changes
	- Push the changes to remote repo.

	Auto trigger Jenkins CI/CD Pipeline using Github webhook / pollSCM. 
		(SCM Checkout, Build, Create Artifacts, Deploy to QA Server)

	Ensure that you cover all possible concepts.

Jenkins :::

Inhouse project for internal automation....

	Server Management 
		Build_Server
		Test_Server

	Periodic Server Management :

	Jenkins_Job1: Backup & Recovery 
	Jenkins_Job2: Update the security patches / upgrade / Install Cert. & Licenses
	Jenkins_Job3: Start / Stop Job


	
		

		





	

