
Kubernetes :::

Architecture ::::




Master Components

Below are the main components on the Kubernetes master node:

etcd cluster – a simple, distributed key value storage which is used to store the Kubernetes cluster data (such as number of pods, their state, namespace, etc), API objects and service discovery details. It is only accessible from the API server for security reasons. 

kube-apiserver – Kubernetes API server is the central management entity that receives all REST requests for modifications (to pods, services, replication sets/controllers and others), serving as frontend to the cluster. 
Also, this is the only component that communicates with the etcd cluster, making sure data is stored in etcd and agrees with the service details of the deployed pods.

kube-controller-manager – runs several distinct controller processes in the background (for example, replication controller controls number of replicas in a pod, endpoints controller populates endpoint objects like services and pods, and others) to regulate the shared state of the cluster and perform routine tasks. 

cloud-controller-manager – is responsible for managing controller processes with dependencies on the underlying cloud provider (if applicable). For example, when a controller needs to check if a node was terminated or set up routes, load balancers or volumes in the cloud infrastructure, all that is handled by the cloud-controller-manager.

kube-scheduler – helps schedule the pods (a co-located group of containers inside which our application processes are running) on the various nodes based on resource utilization. It reads the service’s operational requirements and schedules it on the best fit node. 




Node (worker) components

Below are the main components found on a (worker) node:

kubelet – the main service on a node, regularly taking in new or modified pod specifications (primarily through the kube-apiserver) and ensuring that pods and their containers are healthy and running in the desired state. This component also reports to the master on the health of the host where it is running.

kube-proxy – a proxy service that runs on each worker node to deal with individual host subnetting and expose services to the external world. It performs request forwarding to the correct pods/containers across the various isolated networks in a cluster.







	--> Kubernetes Architecture ::::
	

Kubernetes Master:

1. API Server
2. Scheduler
3. ETCD
4. Controller Manager

Worker Nodes :

1. Kubelet, 
2. Kube proxy, 
3. CRI - Container Engine



	Kubernetes Terminologies & Concepts :::

		kubectl  --> Command line Utility --> Used to interact with K8s.
		kubeadm  --> Command line Utility --> Used to Install & Configure, Attach K8s Master & Worknodes
		Pods	 --> Smallest unit of Scheduling
			 --> Pods is a collection of Container(s).

		Virtual Machine -- VMs
		Docker		-- Containers
		Kubernetes	-- Pods

Docker Assignments :::


##############
27th May. 2023
##############

		Kubernetes Terminologies & Concepts :::

		kubectl  --> Command line Utility --> Used to interact with K8s.
		kubeadm  --> Command line Utility --> Used to Install & Configure, Attach K8s Master & Worknodes
		Pods	 --> Smallest unit of Scheduling
			 --> Pods is a collection of Container(s).

		Kubernetes Master :
		  Cluster :		
			Kubernetes_Worker_Node1
			Kubernetes_Worker_Node2		
			Kubernetes_Worker_Node3
			Kubernetes_Worker_Node4


	Install & Config. Kubernetes Architecture ::

		
		Kubernetes Master :			VM
			Kubernetes_Worker_Node1		VM
			Kubernetes_Worker_Node2		VM



		
		Managed Services ::: AWS,AZ,GCP


		kubeadm 


		Create Pods 

		Write manifest files ---> *.yaml

		kubectl cli --> 

		adhoc commands 	 


		NodePort Service :::::;

			Used to expose the pods to internet:



		Pod -- nginx --> web browser --> 
		Service --> NodePort --> 30000 to 32767
		
		ClusterIP
		NodePort


		Service --> 3 -tier

			
			Front_End - UI 		Pod/Container1		--> Shd be exposed to internet. NodePort Service
			Application_Layer	Pod/Container2		--> Shd Not be exposed to internet. ClusterIP Service
			Back_End(DBase)		Pod/Container3		--> Shd Not be exposed to internet. ClusterIP Service



		NameSpace ::::

			Logical Partition of Cluster :::


		kubectl create namespace dev

[root@ip-172-31-15-73 kubernetes_Demo]# cat nginx-pod1.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod1
  namespace: dev
  labels:
    app: nginx1
    tier: dev1
spec:
  containers:
  - name: nginx-container
    image: nginx

    ports:
    - containerPort: 80		

kubectl config set-context DEV --namespace=dev
kubectl config view | grep namespace
kubectl config set-context --current --namespace=dev


Namespace ::::

DEV Team :::
 	pods 

Test Team :::

	pods	v1.0 namespace1 --> drop this.

	namespace2
		v1.1



