DevOps 11thApr. Batch

##############
22nd Apr. 2023
##############

Git Misc. Commands ::

		revert
		reset
		Branches

git rm --cached 	==> is to unstage.
git rm -rf 		==> unstage and remove from Working dir.


	Working Dir. --> Staging Area --> Local Repo.


	git revert
	git reset 

	git reset :::

					add					Commit
		Working Dir	 	==> 	add the changes to staging 	===>  		Local repo.


		file1.txt			file1.txt					file1.txt	HEAD	 : master CM3
		file1.txt			file1.txt					file1.txt	 	 : master CM2
		file1.txt			file1.txt					file1.txt	 	 : master CM1



	git reset ::
		soft
		*mixed		default option.
		hard

	git reset --soft <commit_id>	==> remove the changes from local repo. but the changes wll be available in staging area & Working dir.

	eg.: 
		git reset --soft CM2

		file1.txt			file1.txt								HEAD	 : master CM2
		file1.txt			file1.txt					file1.txt	 	 : master CM1

	git reset --soft <commit_id>	==> remove the changes from local repo. but the changes will be available in staging area & Working dir.

	git reset --mixed <commit_id>	==> remove the changes from local repo. & Staging Area but the changes will be available Working dir.

	git reset --hard <commit_id>	==> remove the changes from local repo. & Staging Area as well from Working dir.


	git reset <commit_id>

		Always git reset is recommended to use in local repo. or in a single user environment
		It should not be used in shared repository.
		Avoid using reset --hard option.

		Because, git reset will change the commit history, and we lose track of the history.
		



	index.jsp 

		func1()
		{
		}			git add .


		func2()
		{
		}			git add .


		func3()
		{
		}			git add .


	git commit -m "Updated index.jsp"

	git revert --> used to undo the changes. 

			It creates a new commit point and never remove any entry from commit history.
			Used to revert a specific commit.


	git revert <commit_id1> <commit_id2>

	prod_deployment ::::

		Test the prod code. 

	projectv1.4.dummy -- new - revert projectv1.4		is having issue. due to some external dependencies.
	projectv1.5 -- new
	projectv1.4 -- new		is having issue. due to some external dependencies.
	projectv1.3 -- new 

	projectv1.2 -- under execution	
	projectv1.1 -- under execution
	projectv1.0 -- under execution


jus git revert 	projectv1.4 -- new

	git revert 	projectv1.4.dummy


	deployment -- > 4 - 6hrs of deployment window 
		fix the issue....
		revert



	git commit !
	
	git commit -m "valid commit msg"	CR#/REL# - description
	

						
	git commit -m "CR10423 - Created file1.txt"  ==> 

	git commit --amend -m "valid commit message"



	GIT Branches ::::
	
		Git Branching Techniques ::::

			Parallel Development 


	project_repo1:
		master 				==> Will be considered as a shared entity/prod copy

	master - cm1,cm2,cm3
		f1.txt,f2.txt,f3.txt

	Create  feature branch : - cm1,cm2,cm3			CR1 CR2
		f1.txt,f2.txt,f3.txt,f4.txt,f5,txt


	master - cm1,cm2,cm3
		f1.txt,f2.txt,f3.txt

		Create a new branch based on master : CR1-feature  	- cm1,cm2,cm3
									f1.txt,f2.txt,f3.txt,l1.txt


		Create a new branch based on master : CR2-feature  	- cm1,cm2,cm3
									f1.txt,f2.txt,f3.txt,s1.txt

	Git Branching Strategies ::::

	Java_web_application src code repo :::

		master	--> cm1,cm2,cm3

			index.jsp

			feature1 --				Commpleted
				cm1,cm2,cm3,f1cm1,f1cm2
			feature2 --
				cm1,cm2,cm3,f2cm1,f2cm2
			feature3 --
				cm1,cm2,cm3,f3cm1,f3cm2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		master	--> cm1,cm2,cm3
		
			Development_Branch : cm1,cm2,cm3

				feature1 --				Commpleted
					cm1,cm2,cm3,f1cm1,f1cm2
				feature2 --
					cm1,cm2,cm3,f2cm1,f2cm2
				feature3 --
					cm1,cm2,cm3,f3cm1,f3cm2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		master	--> cm1,cm2,cm3

		
			Integration_Branch :::						Team1

				Development_Branch1 : cm1,cm2,cm3

					feature1 --				Commpleted
						cm1,cm2,cm3,f1cm1,f1cm2
					feature2 --
						cm1,cm2,cm3,f2cm1,f2cm2
					feature3 --
						cm1,cm2,cm3,f3cm1,f3cm2
		

				Development_Branch2 : cm1,cm2,cm3

					feature1 --				Commpleted
						cm1,cm2,cm3,f1cm1,f1cm2
					feature2 --
						cm1,cm2,cm3,f2cm1,f2cm2
					feature3 --
						cm1,cm2,cm3,f3cm1,f3cm2

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		master	--> cm1,cm2,cm3		

			Release_Branch :::

				Integration_Branch :::						Team1

					Development_Branch1 : cm1,cm2,cm3

						feature1 --				Commpleted
							cm1,cm2,cm3,f1cm1,f1cm2
						feature2 --
							cm1,cm2,cm3,f2cm1,f2cm2
						feature3 --
							cm1,cm2,cm3,f3cm1,f3cm2
		

					Development_Branch2 : cm1,cm2,cm3

						feature1 --				Commpleted
							cm1,cm2,cm3,f1cm1,f1cm2
						feature2 --
							cm1,cm2,cm3,f2cm1,f2cm2
						feature3 --
							cm1,cm2,cm3,f3cm1,f3cm2

				Integration_Branch :::						Team2

					Development_Branch1 : cm1,cm2,cm3

						feature1 --				Commpleted
							cm1,cm2,cm3,f1cm1,f1cm2
						feature2 --
							cm1,cm2,cm3,f2cm1,f2cm2
						feature3 --
							cm1,cm2,cm3,f3cm1,f3cm2
		

					Development_Branch2 : cm1,cm2,cm3

						feature1 --				Commpleted
							cm1,cm2,cm3,f1cm1,f1cm2
						feature2 --
							cm1,cm2,cm3,f2cm1,f2cm2
						feature3 --
							cm1,cm2,cm3,f3cm1,f3cm2

				Integration_Branch :::						Team3

					Development_Branch1 : cm1,cm2,cm3

						feature1 --				Commpleted
							cm1,cm2,cm3,f1cm1,f1cm2
						feature2 --
							cm1,cm2,cm3,f2cm1,f2cm2
						feature3 --
							cm1,cm2,cm3,f3cm1,f3cm2
		

					Development_Branch2 : cm1,cm2,cm3

						feature1 --				Commpleted
							cm1,cm2,cm3,f1cm1,f1cm2
						feature2 --
							cm1,cm2,cm3,f2cm1,f2cm2
						feature3 --
							cm1,cm2,cm3,f3cm1,f3cm2

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		master	--> cm1,cm2,cm3,hfcm1

			adhoc/hotfix_Branch ::: cm1,cm2,cm3,hfcm1

			Integration_Branch :::						Team1

				Development_Branch1 : cm1,cm2,cm3,hfcm1

					feature1 --				Commpleted
						cm1,cm2,cm3,f1cm1,f1cm2
					feature2 --
						cm1,cm2,cm3,f2cm1,f2cm2
					feature3 --
						cm1,cm2,cm3,f3cm1,f3cm2
		

				Development_Branch2 : cm1,cm2,cm3,hfcm1

					feature1 --				Commpleted
						cm1,cm2,cm3,f1cm1,f1cm2
					feature2 --
						cm1,cm2,cm3,f2cm1,f2cm2
					feature3 --
						cm1,cm2,cm3,f3cm1,f3cm2

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	Create Branches ::::

		git branch 		==> list the branches

		git switch -c feature1
		git branch <branch_name>
		git checkout -b feature4



##############
23rd Apr. 2023
##############


	Working with GIT Branches!!!!

	How to create branches in local

	Git Merge :::

		-	First we should switch to the target branch.
		-	From target branch issue the following command :
				git merge feature1 
	


		master	--> cm1,cm2,cm3

			feature1 --				Commpleted
				cm1,cm2,cm3
				cm1,cm2,cm3,f1cm1	

			feature2 --				Commpleted
				cm1,cm2,cm3,f2cm1


		git merge feature1

		* master ---> cm1,cm2,cm3,f1cm1,f2cm1



	Merge Conflict :::

		1. How the Merge Conflict Occurs ?
			Merge Conflict Occurs, when more than one user/feature try to update the same file and record.

		2. How to resolve Merge Conflict ?
			1. Identify the file(s) causing the merge conflict.
			2. Review the content of the File that is causing merge conflict.
			3. Decide whose changes to be merge/retained in Target Branch.
			4. Update the file accordingly.
			5. Add and Commit the changes.
		

	How to prevent Merge Conflicts ????
			-	Review.

		Merging -->

		
		Rebase :::::

			master	--> cm1,cm2,cm3

				feature1 --				
					cm1,cm2,cm3

				feature2 --			
					cm1,cm2,cm3

		Perform Incremental Changes in feature1 ::

				feature1 --
					cm1,cm2,cm3,f1cm1

				switch to master
				git merge feature1

				* master ---> cm1,cm2,cm3,f1cm1
					both master & feature1 are in-sync.



				feature2 --
					cm1,cm2,cm3,f2cm1

				switch to master
				git merge feature2			
				* master ---> cm1,cm2,cm3,f2cm1,f1cm1

			Rebase ::::
				Always we shd perform rebase, before merge. If it is a shared repo./branch
			
			Current Branch : feature2
				feature2 --
					cm1,cm2,cm3,f2cm1

				git rebase master 
					cm1,cm2,cm3,f1cm1,f2cm1
				

				switch to master
				git merge feature2			
				* master ---> cm1,cm2,cm3,f1cm1,f2cm1

	
		Squash ::: Its is used to combine multiple commits into one.
				
			index.jsp


			master	--> cm1,cm2,cm3

				feature1 --				
					cm1,cm2,cm3,f1cm1,2,....................,100


		Java_Program --> Calculator.java 

			5 function. 

		add(){
		asdfas
		dfa
		sdf
		a
		df
		asd
		f
		}

		sub()
		.......()

		project_repo:
	
		master - CMCM,add_func,sub_func

			calc_feature --> CM,addcm1,addcm2,addcm3,addcm4,addcm5,subcm1,2,3,4,5,6,7,8

			calc_feature --> CM,add_func,sub_func


		squash :
			- Before Merge: (While working in feature branch)

				git rebase -i HEAD~3


			- while merging:
				git merge --squash feature1




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		master	--> cm1,cm2,cm3,Changes_from_Team1		

			Release_Branch ::: cm1,cm2,cm3,Changes_from_Team1,Changes_from_Team2		===>  Release_V1.4
					cm1,cm2,cm3,f1cm1,f1cm2,3,4,5,6,7,8,9,f2cm1,f2cm2,3,4,5,6,7,8,9,f3cm2,3,4,5,6,7,8,9,f1cm1,f1cm2,3,4,5,6,7,8,9,f2cm1,f2cm2,3,4,5,6,7,8,9,f3cm2,3,4,5,6,7,8,9

				Integration_Branch :::	cm1,cm2,cm3,Changes_from_Team1_dev1,Changes_from_Team1_dev2   ==> Changes_from_Team1					Team1

					Development_Branch1 : cm1,cm2,cm3,f1cm1,f1cm2,3,4,5,6,7,8,9,f2cm1,f2cm2,3,4,5,6,7,8,9,f3cm2,3,4,5,6,7,8,9 ==> Changes_from_Team1_dev1
								

						feature1 --				Commpleted
							cm1,cm2,cm3,f1cm1,f1cm2,3,4,5,6,7,8,9
						feature2 --
							cm1,cm2,cm3,f2cm1,f2cm2,3,4,5,6,7,8,9
						feature3 --
							cm1,cm2,cm3,f3cm1,f3cm2,3,4,5,6,7,8,9
		

					Development_Branch2 : cm1,cm2,cm3		==> Changes_from_Team1_dev2

						feature1 --				Commpleted
							cm1,cm2,cm3,f1cm1,f1cm2
						feature2 --
							cm1,cm2,cm3,f2cm1,f2cm2
						feature3 --
							cm1,cm2,cm3,f3cm1,f3cm2


				Integration_Branch :::	cm1,cm2,cm3,Changes_from_Team2_dev1,Changes_from_Team2_dev2	  ==> Changes_from_Team2				Team2

					Development_Branch1 : cm1,cm2,cm3		===> Changes_from_Team2_dev1

						feature1 --				Commpleted
							cm1,cm2,cm3,f1cm1,f1cm2
						feature2 --
							cm1,cm2,cm3,f2cm1,f2cm2
						feature3 --
							cm1,cm2,cm3,f3cm1,f3cm2
		

					Development_Branch2 : cm1,cm2,cm3		===> Changes_from_Team2_dev2
		
						feature1 --				Commpleted
							cm1,cm2,cm3,f1cm1,f1cm2
						feature2 --
							cm1,cm2,cm3,f2cm1,f2cm2
						feature3 --
							cm1,cm2,cm3,f3cm1,f3cm2






	cherrypick ::
 		git cherry-pick <commit_id>  -- executed from the target branch.

 		git cherry-pick <commit_id> <commit_id>

Summary: 

	Local repo & all the git commands....
		git file workflow
		git branching strategies
		Merge conflicts
		rebase,squash


Next : Remote Repositories :::




	developer : Project folder
					index.jsp  ==> 2000+ lines of code

			local_machine...
				Project_Folder
					master --> index.jsp  ==> 2000+ lines of code

						feature1 ==> index.jsp  ==> 2000+ lines of code +++1000



##############
29th Apr. 2023
##############

		Git Remote Repositories :::

			git branching techniques 
			rebase, squash
			branching strategies
			Stash ==> 

		
	Branching Strategies :::

		Feature based 



		master branch 
			Dev_branch : 
			 	feature1 ==> Scripts... created some changes in the repo.... created a index.jsp file --- adding the incremental changes to staging.
				feature2 

		Stash ::: ==> Used to safely move the UnCommited changes from staging area to Temp. Area. (or) Temp. Branch.


			Stash current work:
					$ git stash

					Saving stashes with a message: 
					$ git stash save "<Stashing Message>"

					Check the stored stashes: 
					$ git stash list

					Re-apply the changes that you just stashed 
					$ git stash apply 

					Track the stashes and their changes: 
					$ git stash show stash@{0}

					Re-apply the previous commits: 
					$ git stash pop

					Delete a most recent stash from the queue: 
					$ git stash drop

					Delete all the available stashes at once: 
					$ git stash clear

					Stash work on a separate branch: 
					$ git stash branch <branch name>

	.gitignore!!!
	
	GIT Remote Repository :::

		github :
			create a remote repo
			create files,
			create branches, pull request, merge
			how to access it in local repo.
		git clone,pull,fetch,push,remote 
		github access token 
 
	.gitignore 
		
	java_web_appln.project -- craeted in  Dev Machine.
	
	Java_web_appln.project 3-tier appln. dbase.     >>>> 	push t changes into remote repo.
		src 
		  sample.java
		  index.jsp 
		test
		pom.xml
		properties
		config
		secrets
		db1_credential
		target
		  *.war

	git init 
	.gitignore file
		secrets
		db1_credential

	how to access it in local repo.???????
		git clone,pull,fetch,push,remote 
		github access token


	Remote Repo.?

	Developers' Workload ???
		New Project 
			git init  == > push 			
	
			git clone  ==> push
		Change Request / Enhancements 
		Bug fix...
	
		git clone https://github.com/SA-11Mar-2023-DevOps/testremoterepo1.git
	

git clone
push
remote 

	fetch --> check for the incremental changes
	pull  --> git fetch & merge	



Summary :::
	git workflow
	git branching strategies
	Misc. GIT Command
	Merge,rebase,squash,stash
	Remote Repo.

Next Module ::::		

	Jenkins.

	Maven Projects?
		web appln.
		spring boot 
		java web appln.

*******************************************************************************


##############
29th Apr. 2023
##############

		Git Remote Repositories :::

			git branching techniques 
			rebase, squash
			branching strategies
			Stash ==> 

		
	Branching Strategies :::

		Feature based 



		master branch 
			Dev_branch : 
			 	feature1 ==> Scripts... created some changes in the repo.... created a index.jsp file --- adding the incremental changes to staging.
				feature2 

		Stash ::: ==> Used to safely move the UnCommited changes from staging area to Temp. Area. (or) Temp. Branch.


			Stash current work:
					$ git stash

					Saving stashes with a message: 
					$ git stash save "<Stashing Message>"

					Check the stored stashes: 
					$ git stash list

					Re-apply the changes that you just stashed 
					$ git stash apply 

					Track the stashes and their changes: 
					$ git stash show stash@{0}

					Re-apply the previous commits: 
					$ git stash pop

					Delete a most recent stash from the queue: 
					$ git stash drop

					Delete all the available stashes at once: 
					$ git stash clear

					Stash work on a separate branch: 
					$ git stash branch <branch name>

	.gitignore!!!
	
	GIT Remote Repository :::

		github :
			create a remote repo
			create files,
			create branches, pull request, merge
			how to access it in local repo.
		git clone,pull,fetch,push,remote 
		github access token 
 
	.gitignore 
		
	java_web_appln.project -- craeted in  Dev Machine.
	
	Java_web_appln.project 3-tier appln. dbase.     >>>> 	push t changes into remote repo.
		src 
		  sample.java
		  index.jsp 
		test
		pom.xml
		properties
		config
		secrets
		db1_credential
		target
		  *.war

	git init 
	.gitignore file
		secrets
		db1_credential
	








	how to access it in local repo.???????
		git clone,pull,fetch,push,remote 
		github access token


	Remote Repo.?

	Developers' Workload ???
		New Project 
			git init  == > push 			
	
			git clone  ==> push
		Change Request / Enhancements 
		Bug fix...
	
		git clone https://github.com/SA-11Mar-2023-DevOps/testremoterepo1.git
	

git clone
push
remote 

	fetch --> check for the incremental changes
	pull  --> git fetch & merge	



Summary :::
	git workflow
	git branching strategies
	Misc. GIT Command
	Merge,rebase,squash,stash
	Remote Repo.

Next Module ::::		

	Jenkins.

	Maven Projects?
		web appln.
		spring boot 
		java web appln.
		
